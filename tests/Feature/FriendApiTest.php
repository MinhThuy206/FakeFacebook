<?php

namespace Tests\Feature;

use App\Enums\FriendshipStatus;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class FriendApiTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user1 = User::query()->create([
            'name' => 'Thuy',
            'phone' => '0379371432',
            'email' => 'bichthuy@gmail.com',
            'password' => 'Thuy01!!!',
        ]);

        $this->user2 = User::query()->create([
            'name' => 'PhanHung',
            'phone' => '0379371431',
            'email' => 'phanhung@gmail.com',
            'password' => 'Thuy01!!!',
        ]);

        $this->user3 = User::query()->create([
            'name' => 'KimNgan',
            'phone' => '0379371434',
            'email' => 'kimngan@gmail.com',
            'password' => 'Thuy01!!!',
        ]);
    }

    public function test_addfriend_fail()
    {
        $response = $this->actingAs($this->user1)->json('post','/api/friend', [
            'user_id2' => -1
        ]);
        $response ->assertStatus(422);
    }

    public function test_addfriend_success()
    {
        $response = $this->actingAs($this->user3)->json('post','/api/friend', [
            'user_id2' => $this->user2->id,
        ]);
        $response ->assertStatus(200);
        print_r($response -> decodeResponseJson());
    }
}
